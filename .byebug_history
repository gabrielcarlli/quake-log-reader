exit
response[key][:player_info].max_by { |_k, v| v[:final_score] }[1][:final_score]
response[key][:player_info].max_by { |_k, v| v[:final_score] }
exit
c
match[1].class
match[1]
match
i
n
c
@matches.first
@matches
log
exit
@match
n
@match
c
@match
n
match[1]
n
c
match[1][:players]
match[1].class
match[1]
match
n
c
match
clear
c
exit
kills.reject { |kill| kill[2] == player }
deaths.select { |death| death[0] == death[1] }.size
kills
c
kills
exit
kills
kills.select { |kill| kill[0] == player }
kills.select { |kill| kill[0] == player.to_s }
player
c
kills.select { |kill| kill[0] == player.to_s }
kills.select { |kill| kill[0] == player }
kills
player
players.count
c
players.count
exit
round.scan(/(\w+|<\w+>)\s+killed\s+(.*)\s+by\s+(.*)/)
round
c
round
round.scan(/(\w+|<\w+>)\s+killed\s+(.*)\s+by\s+(.*)/)
all_kills
exit
c
kills
player
exit
matches.class
matches.first
matches.shift
matches.class
matches = log.split('InitGame')
matches
matches.class
exit
matches.shift!
matches.shift.class
matches.class
c
@log_content
n
c
n
valid_log_file?(@log)
c
@log
c
n
flash
c
@log.content_type
@log.content_type == "text/plain"
n
params[:log].present?
params[:log]
params
